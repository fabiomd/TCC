(in-package #:wao)

; ****************************************************************************************************

(defun expand-body (wat-code)
	(let ((body-node '()))
		(loop for body in wat-code do
			(cond ((check-operator (write-to-string (car body)))
				     (setf body-node (append body-node (list (expand-operator body)))))
				  ((string= "GET_LOCAL" (car body))
				     (setf body-node (append body-node (list (expand-get-local body)))))
				  ((string= "SET_LOCAL" (car body))
				     (setf body-node (append body-node (list (expand-set-local body)))))
				  ((string= "LOCAL" (car body))
				     (setf body-node (append body-node (list (expand-local body)))))
				  ((string= "IF" (car body))
				     (setf body-node (append body-node (list (expand-if body)))))
				  ((string= "RESULT" (car body))
				     (setf body-node (append body-node (list (expand-result body)))))
				  ((string= "THEN" (car body))
				     (setf body-node (append body-node (list (expand-then body)))))
				  ((string= "ELSE" (car body))
				     (setf body-node (append body-node (list (expand-else body)))))
				  ((string= "CALL" (car body))
				     (setf body-node (append body-node (list (expand-call body)))))
				  ((string= "LOOP" (car body))
				     (setf body-node (append body-node (list (expand-loop body)))))
				  ((string= "BR_IF" (car body))
				     (setf body-node (append body-node (list (expand-break-if body)))))
				  ((string= "BR" (car body))
				     (setf body-node (append body-node (list (expand-break body)))))
				  ((string= "BLOCK" (car body))
				     (setf body-node (append body-node (list (expand-block body)))))
				  ((check-convert (write-to-string (car body)))
				  	 (setf body-node (append body-node (list (expand-convert body)))))
				  (t (error-notification "undefined body expand method"))
		    )
		)
		body-node
	)
)

; ****************************************************************************************************

(defun retrieve-body (nodes)
	(let ((code ""))
		(loop for node in nodes do
			(cond ((eql (type-of node) 'operator-node)
			      	   (setf code (concatenate 'string code " " (retrieve-operator  node))))
			      ((eql (type-of node) 'get-local-node)
				       (setf code (concatenate 'string code " " (retrieve-get-local node))))
			      ((eql (type-of node) 'set-local-node)
				       (setf code (concatenate 'string code " " (retrieve-set-local node))))
			      ((eql (type-of node) 'local-node)
				       (setf code (concatenate 'string code " " (retrieve-local node))))
			      ((eql (type-of node) 'convert-node)
			      	   (setf code (concatenate 'string code " " (retrieve-convert node))))
			      ((eql (type-of node) 'if-node)
			      	   (setf code (concatenate 'string code " " (retrieve-if node))))
			      ((eql (type-of node) 'result)
			      	   (setf code (concatenate 'string code " " (retrieve-result node))))
			      ((eql (type-of node) 'then-node)
			      	   (setf code (concatenate 'string code " " (retrieve-then node))))
			      ((eql (type-of node) 'else-node)
			      	   (setf code (concatenate 'string code " " (retrieve-else node))))
			      ((eql (type-of node) 'call-node)
			      	   (setf code (concatenate 'string code " " (retrieve-call node))))
			      ((eql (type-of node) 'loop-node)
			      	   (setf code (concatenate 'string code " " (retrieve-loop node))))
			      ((eql (type-of node) 'break-if-node)
			      	   (setf code (concatenate 'string code " " (retrieve-break-if node))))
			      ((eql (type-of node) 'break-node)
			      	   (setf code (concatenate 'string code " " (retrieve-break node))))
			      ((eql (type-of node) 'block-node)
			      	   (setf code (concatenate 'string code " " (retrieve-block node))))
				  (t (progn 
				  	(error-notification "undefined body retrieve method")))
		    )
		)
		code
	)
)

; ****************************************************************************************************

(defun copy-body (nodes)
	(let ((code '()))
		(loop for node in nodes do
			(cond ((eql (type-of node) 'operator-node)
			      	   (setf code (append code (list (copy-operator node)))))
			      ((eql (type-of node) 'get-local-node)
			      	   (setf code (append code (list (copy-get-local node)))))
			      ((eql (type-of node) 'set-local-node)
			      	   (setf code (append code (list (copy-set-local node)))))
			      ((eql (type-of node) 'local-node)
			      	   (setf code (append code (list (copy-local node)))))
			      ((eql (type-of node) 'convert-node)
			      	   (setf code (append code (list (copy-convert node)))))
			      ((eql (type-of node) 'if-node)
			      	   (setf code (append code (list (copy-if node)))))
			      ((eql (type-of node) 'result)
			      	   (setf code (append code (list (copy-result node)))))
			      ((eql (type-of node) 'then-node)
			      	   (setf code (append code (list (copy-then node)))))
			      ((eql (type-of node) 'else-node)
			      	   (setf code (append code (list (copy-else node)))))
			      ((eql (type-of node) 'call-node)
			       	   (setf code (append code (list (copy-call node)))))
			      ((eql (type-of node) 'loop-node)
			       	   (setf code (append code (list (copy-loop node)))))
			      ((eql (type-of node) 'break-if-node)
			       	   (setf code (append code (list (copy-break-if node)))))
			      ((eql (type-of node) 'break-node)
			       	   (setf code (append code (list (copy-break node)))))
			      ((eql (type-of node) 'block-node)
			      	   (setf code (append code (list (copy-block node)))))
				  (t (error-notification "undefined body copy method"))
		    )
		)
		code
	)
)

; ****************************************************************************************************

(defvar generate-operator-chance 0.30)
(defvar generate-if-chance 0.10)
(defvar generate-get-local-chance 0.50)
(defvar generate-set-local-chance 0.20)
(defvar generate-local-chance 0.20)
(defvar generate-call-chance 0.15)
(defvar generate-loop-chance 0.15)

(defun generate-body (webassembly-symbol-table subnodes)
	(let ((chances (list generate-operator-chance 
						 generate-get-local-chance 
						 generate-set-local-chance
						 generate-local-chance
						 generate-if-chance
						 generate-call-chance
						 generate-loop-chance)))
		(let ((pos (choose-by-chances chances)))
			(let ((generated-node
				(cond ((eql pos 0)
						(generate-operator webassembly-symbol-table subnodes))
					  ((eql pos 1)
					  	(generate-get-local webassembly-symbol-table))
					  ((eql pos 2)
					  	(generate-set-local webassembly-symbol-table subnodes))
					  ((eql pos 3)
					  	(generate-local))
					  ((eql pos 4)
					  	(generate-if webassembly-symbol-table subnodes))
					  ((eql pos 5)
					   	(generate-call webassembly-symbol-table subnodes))
					  ((eql pos 6)
					   	(let ((loop-node (generate-loop webassembly-symbol-table subnodes)))
					   		(generate-block webassembly-symbol-table (list loop-node))
					   	))
					  (t (error-notification "undefined body generate"))
				)))
			    (if generated-node
			    	generated-node
			    	(generate-body webassembly-symbol-table subnodes)
			    )
			)
		)
	)
)

; ****************************************************************************************************

(defun get-node-parameters (node)
	(cond ((eql (type-of node) 'operator-node)
	      	   (get-operator-parameters node))
	      ((eql (type-of node) 'get-local-node)
		       (get-local-parameters))
	      ((eql (type-of node) 'set-local-node)
		       (set-local-parameters node))
	      ((eql (type-of node) 'convert-node)
	      	   (get-convert-parameters node))
	      ((eql (type-of node) 'local-node)
	      	   (local-parameters))
	      ((eql (type-of node) 'if-node)
	      	   (get-if-parameters node))
	      ((eql (type-of node) 'result)
	      	   (get-result-parameters node))
	      ((eql (type-of node) 'then-node)
	      	   (get-then-parameters node))
	      ((eql (type-of node) 'else-node)
	      	   (get-else-parameters node))
	      ((eql (type-of node) 'call-node)
	       	   (get-call-parameters node))
	      ((eql (type-of node) 'loop-node)
	       	   (get-loop-parameters node))
	      ((eql (type-of node) 'break-if-node)
	       	   (get-break-if-parameters node))
	      ((eql (type-of node) 'break-node)
	       	   (get-break-parameters node))
	      ((eql (type-of node) 'block-node)
	      	   (get-block-parameters node))
	      ((eql (type-of node) 'multiple-node)
	      	   (get-multiple-parameters node))
		  (t '())
    )
)

; ****************************************************************************************************

(defun get-node-return-type (node webassembly-symbol-table)
	(cond ((eql (type-of node) 'operator-node)
	      	   (get-operator-return-type node))
	      ((eql (type-of node) 'get-local-node)
		       (get-local-return-type node webassembly-symbol-table))
	      ((eql (type-of node) 'set-local-node)
		       (set-local-return-type))
	      ((eql (type-of node) 'convert-node)
	      	   (get-convert-return-type node))
	      ((eql (type-of node) 'local-node)
	      	   (local-return-type))
	      ((eql (type-of node) 'if-node)
	      	   (get-if-return-type node webassembly-symbol-table))
	      ((eql (type-of node) 'result)
	      	   (get-result-return-type node webassembly-symbol-table))
	      ((eql (type-of node) 'then-node)
	      	   (get-then-return-type node webassembly-symbol-table))
	      ((eql (type-of node) 'else-node)
	      	   (get-else-return-type node webassembly-symbol-table))
	      ((eql (type-of node) 'call-node)
	      	   (get-call-return-type node webassembly-symbol-table))
	      ((eql (type-of node) 'loop-node)
	      	   (get-loop-return-type node webassembly-symbol-table))
	      ((eql (type-of node) 'break-if-node)
	      	   (get-break-if-return-type node webassembly-symbol-table))
	      ((eql (type-of node) 'break-node)
	      	   (get-break-return-type node webassembly-symbol-table))
		  (t (car *void-types*))
    )
)

(defun retrieve-body-variables-ids (nodes)
	(let ((temp-variable-ids '()))
		(loop for node in nodes do
			(cond ((eql (type-of node) 'get-local-node)
				       (setf temp-variable-ids (append temp-variable-ids (list (get-local-id node)))))
			      (t (let ((subnodes (get-node-parameters node)))
			      	   (setf temp-variable-ids (append temp-variable-ids (retrieve-body-variables-ids subnodes)))
			      	)))
		)
		temp-variable-ids
	)
)

(defun count-body-nodes (nodes)
	(if (listp nodes)
		(let ((counter 1))
			(loop for node in nodes do
				(setf counter (+ counter 1 (count-node-parameters node)))
			)
			counter
		)
		(+ 1 (count-node-parameters nodes))
	)
)

(defun count-node-parameters (node)
	(let ((counter 0))
		(let ((parameters (get-node-parameters node)))
			(loop for param in parameters do
				(setf counter (+ counter (count-body-nodes param)))
			)
		)
		counter
	)
)